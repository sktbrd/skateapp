AudioWorkletProcessor.prototype._F=function(){this._G=true;this.port.onmessage=(_H)=>{if(_H.data==="kill")this._G=false;};};class _I extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._F();}process(_J,_K,parameters){const input=_J[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _L=input[c];for(let _M=0;_M<_L.length;++_M){const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];
_K[_N][c][_M]=_L[_M];}}return this._G;}}class _O extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._F();}process(_J,_K,parameters){const _P=_J[0];const _Q=_J[1];const output=_K[0];const gain=parameters.gain;for(let c=0;c<_Q.length;++c){const _L=_Q[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M)_R[_M]=_L[_M];}for(let c=0;c<_P.length;++c){const _L=_P[c];const _R=output[c];for(let _M=0;_M<_L.length;
++_M){const _S=(gain[_M]!==undefined)?gain[_M]:gain[0];_R[_M]+=_L[_M]*_S;}}return this._G;}}registerProcessor("audio-bus-input",_I);registerProcessor("audio-bus-output",_O);class _T extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",
defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _U=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_V){super();this._F();const _W=_V.outputChannelCount[0];this._X=new Float32Array(_W);this._Y=new Uint32Array(_W);}process(_J,_K,parameters){const input=_J[0];const output=_K[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;
const mix=parameters.mix;for(let c=0;c<input.length;++c){const _L=input[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M){_R[_M]=_L[_M];if(this._Y[c]===0)this._X[c]=_L[_M];const _Z=(factor[_M]!==undefined)?factor[_M]:factor[0];++this._Y[c];this._Y[c]%=_Z;const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];if(_N>0.0){continue;}let __=this._X[c];const _S=(gain[_M]!==undefined)?gain[_M]:gain[0];__*=_S;__=Math.max(Math.min(__,1.0),-1.0);const _01=(resolution[_M]!==undefined)?resolution[_M]:resolution[0];
const max=(__>0.0)?_T._U[_01]-1:_T._U[_01];__=Math.round(__*max)/max;const _11=(mix[_M]!==undefined)?mix[_M]:mix[0];_R[_M]*=(1.0-_11);_R[_M]+=(__*_11);}}return this._G;}}registerProcessor("bitcrusher-processor",_T);class _21 extends AudioWorkletProcessor{static _31=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_21._31},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_V){super();this._F();const _W=_V.outputChannelCount[0];const _41=(_21._31*sampleRate)+1;this.buffer=new Array(_W);this._51=new Uint32Array(_W);for(let c=0;c<_W;++c)this.buffer[c]=new Float32Array(_41);}process(_J,_K,parameters){const input=_J[0];const output=_K[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;
for(let c=0;c<input.length;++c){const _L=input[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M){_R[_M]=_L[_M];const _61=(time[_M]!==undefined)?time[_M]:time[0];const _71=this._81(c,_61);const _Z=(feedback[_M]!==undefined)?feedback[_M]:feedback[0];const _91=_L[_M]+(_71*_Z);this.write(c,_91);const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];if(_N>0.0){continue;}const _11=(mix[_M]!==undefined)?mix[_M]:mix[0];_R[_M]*=(1-_11);_R[_M]+=(_71*_11);}}return this._G;}_81(_a1,_b1){const _c1=_b1*sampleRate;let _d1=(this._51[_a1]-~~_c1);
let _e1=(_d1-1);while(_d1<0)_d1+=this.buffer[_a1].length;while(_e1<0)_e1+=this.buffer[_a1].length;const frac=_c1-~~_c1;const _f1=this.buffer[_a1][_d1];const _g1=this.buffer[_a1][_e1];return _f1+(_g1-_f1)*frac;}write(_a1,_h1){++this._51[_a1];this._51[_a1]%=this.buffer[_a1].length;this.buffer[_a1][this._51[_a1]]=_h1;}}registerProcessor("delay-processor",_21);class _i1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._F();}process(_j1,_k1,_l1){const input=_j1[0];
const _m1=_k1[0];const _n1=_k1[1];for(let c=0;c<input.length;++c){const _L=input[c];const _o1=_m1[c];const _p1=_n1[c];for(let _M=0;_M<_L.length;++_M){_o1[_M]=_L[_M];_p1[_M]=_L[_M];}}return this._G;}}class _q1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._F();}process(_j1,_k1,_l1){const _P=_j1[0];const _Q=_j1[1];const output=_k1[0];const bypass=_l1.bypass;for(let c=0;c<_Q.length;++c){
const _r1=_P[c];const _s1=_Q[c];const _R=output[c];for(let _M=0;_M<_r1.length;++_M){const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];if(_N>0){_R[_M]=_s1[_M];}else {_R[_M]=_r1[_M];}}}return this._G;}}registerProcessor("eq-input",_i1);registerProcessor("eq-output",_q1);class _t1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){
super();this._F();}process(_J,_K,parameters){const input=_J[0];const output=_K[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _L=input[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M){_R[_M]=_L[_M];const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];if(_N>0.0){continue;}const _S=(gain[_M]!==undefined)?gain[_M]:gain[0];_R[_M]*=_S;}}return this._G;}}registerProcessor("gain-processor",_t1);class _u1 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _v1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_v1),minValue:10.0,maxValue:_v1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_V){super();this._F();const _W=_V.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;this._z1=0;this._A1=0;this._B1=new Float32Array(_W);
this._C1=new Float32Array(_W);this._D1=new Float32Array(_W);this._E1=new Float32Array(_W);this._F1=-1;this._G1=-1;this._H1=-1;}process(_J,_K,parameters){const input=_J[0];const output=_K[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _I1=(freq.length===1&&q.length===1&&gain.length===1);if(_I1)this._J1(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _L=input[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M){if(_I1===false){const _Z=(freq[_M]!==undefined)?freq[_M]:freq[0];
const _K1=(q[_M]!==undefined)?q[_M]:q[0];const _S=(gain[_M]!==undefined)?gain[_M]:gain[0];this._J1(_Z,_K1,_S);}const _L1=this._y1*_L[_M]+this._z1*this._B1[c]+this._A1*this._C1[c]-this._w1*this._D1[c]-this._x1*this._E1[c];this._C1[c]=this._B1[c];this._B1[c]=_L[_M];this._E1[c]=this._D1[c];this._D1[c]=_L1;const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];_R[_M]=(_N>0)?_L[_M]:_L1;}}return this._G;}_J1(_M1,_N1,_O1){if(_M1===this._F1&&_N1===this._G1&&_O1===this._H1)return;const _P1=2*Math.PI*_M1/sampleRate;
const _Q1=Math.cos(_P1);const _R1=Math.sqrt(_O1);const _S1=_R1+1;const _T1=_R1-1;const _U1=_S1*_Q1;const _V1=_T1*_Q1;const _W1=_S1-_V1;const _X1=_S1+_V1;const alpha=Math.sin(_P1)/(2*_N1);const _Y1=(2*Math.sqrt(_R1)*alpha);const _Z1=_W1+_Y1;const _w1=2*(_T1-_U1);const _x1=_W1-_Y1;const _y1=_R1*(_X1+_Y1);const _z1=-2*_R1*(_T1+_U1);const _A1=_R1*(_X1-_Y1);this._w1=_w1/_Z1;this._x1=_x1/_Z1;this._y1=_y1/_Z1;this._z1=_z1/_Z1;this._A1=_A1/_Z1;this._F1=_M1;this._G1=_N1;this._H1=_O1;}}registerProcessor("hi-shelf-processor",
_u1);class __1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _02=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_02),minValue:10.0,maxValue:_02},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_V){super();this._F();const _W=_V.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;this._z1=0;this._A1=0;
this._B1=new Float32Array(_W);this._C1=new Float32Array(_W);this._D1=new Float32Array(_W);this._E1=new Float32Array(_W);this._12=-1;this._G1=-1;}process(_J,_K,parameters){const input=_J[0];const output=_K[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _I1=(cutoff.length===1&&q.length===1);if(_I1)this._J1(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _L=input[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M){if(_I1===false){const c=(cutoff[_M]!==undefined)?cutoff[_M]:cutoff[0];
const _K1=(q[_M]!==undefined)?q[_M]:q[0];this._J1(c,_K1);}const _L1=this._y1*_L[_M]+this._z1*this._B1[c]+this._A1*this._C1[c]-this._w1*this._D1[c]-this._x1*this._E1[c];this._C1[c]=this._B1[c];this._B1[c]=_L[_M];this._E1[c]=this._D1[c];this._D1[c]=_L1;const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];_R[_M]=(_N>0)?_L[_M]:_L1;}}return this._G;}_J1(_22,_N1){if(_22===this._12&&_N1===this._G1)return;const _P1=2*Math.PI*_22/sampleRate;const alpha=Math.sin(_P1)/(2*_N1);const _Q1=Math.cos(_P1);const _Z1=1+alpha;
const _w1=-2*_Q1;const _x1=1-alpha;const _y1=(1+_Q1)/2;const _z1=-1-_Q1;const _A1=(1+_Q1)/2;this._w1=_w1/_Z1;this._x1=_x1/_Z1;this._y1=_y1/_Z1;this._z1=_z1/_Z1;this._A1=_A1/_Z1;this._12=_22;this._G1=_N1;}}registerProcessor("hpf2-processor",__1);class _32 extends AudioWorkletProcessor{static get parameterDescriptors(){const _v1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,
_v1),minValue:10.0,maxValue:_v1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_V){super();this._F();const _W=_V.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;this._z1=0;this._A1=0;this._B1=new Float32Array(_W);this._C1=new Float32Array(_W);this._D1=new Float32Array(_W);this._E1=new Float32Array(_W);this._F1=-1;this._G1=-1;this._H1=-1;}process(_J,_K,parameters){const input=_J[0];
const output=_K[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _I1=(freq.length===1&&q.length===1&&gain.length===1);if(_I1)this._J1(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _L=input[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M){if(_I1===false){const _Z=(freq[_M]!==undefined)?freq[_M]:freq[0];const _K1=(q[_M]!==undefined)?q[_M]:q[0];const _S=(gain[_M]!==undefined)?gain[_M]:gain[0];this._J1(_Z,_K1,_S);}const _L1=this._y1*_L[_M]+this._z1*this._B1[c]+this._A1*this._C1[c]-this._w1*this._D1[c]-this._x1*this._E1[c];
this._C1[c]=this._B1[c];this._B1[c]=_L[_M];this._E1[c]=this._D1[c];this._D1[c]=_L1;const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];_R[_M]=(_N>0)?_L[_M]:_L1;}}return this._G;}_J1(_M1,_N1,_O1){if(_M1===this._F1&&_N1===this._G1&&_O1===this._H1)return;const _P1=2*Math.PI*_M1/sampleRate;const _Q1=Math.cos(_P1);const _R1=Math.sqrt(_O1);const _S1=_R1+1;const _T1=_R1-1;const _U1=_S1*_Q1;const _V1=_T1*_Q1;const _W1=_S1-_V1;const _X1=_S1+_V1;const alpha=Math.sin(_P1)/(2*_N1);const _Y1=(2*Math.sqrt(_R1)*alpha);const _Z1=_X1+_Y1;
const _w1=-2*(_T1+_U1);const _x1=_X1-_Y1;const _y1=_R1*(_W1+_Y1);const _z1=2*_R1*(_T1-_U1);const _A1=_R1*(_W1-_Y1);this._w1=_w1/_Z1;this._x1=_x1/_Z1;this._y1=_y1/_Z1;this._z1=_z1/_Z1;this._A1=_A1/_Z1;this._F1=_M1;this._G1=_N1;this._H1=_O1;}}registerProcessor("lo-shelf-processor",_32);class _42 extends AudioWorkletProcessor{static get parameterDescriptors(){const _02=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",
defaultValue:Math.min(500.0,_02),minValue:10.0,maxValue:_02},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_V){super();this._F();const _W=_V.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;this._z1=0;this._A1=0;this._B1=new Float32Array(_W);this._C1=new Float32Array(_W);this._D1=new Float32Array(_W);this._E1=new Float32Array(_W);this._12=-1;this._G1=-1;}process(_J,_K,parameters){const input=_J[0];const output=_K[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _I1=(cutoff.length===1&&q.length===1);if(_I1)this._J1(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _L=input[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M){if(_I1===false){const c=(cutoff[_M]!==undefined)?cutoff[_M]:cutoff[0];const _K1=(q[_M]!==undefined)?q[_M]:q[0];this._J1(c,_K1);}const _L1=this._y1*_L[_M]+this._z1*this._B1[c]+this._A1*this._C1[c]-this._w1*this._D1[c]-this._x1*this._E1[c];this._C1[c]=this._B1[c];this._B1[c]=_L[_M];this._E1[c]=this._D1[c];this._D1[c]=_L1;
const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];_R[_M]=(_N>0)?_L[_M]:_L1;}}return this._G;}_J1(_22,_N1){if(_22===this._12&&_N1===this._G1)return;const _P1=2*Math.PI*_22/sampleRate;const alpha=Math.sin(_P1)/(2*_N1);const _Q1=Math.cos(_P1);const _Z1=1+alpha;const _w1=-2*_Q1;const _x1=1-alpha;const _y1=(1-_Q1)/2;const _z1=1-_Q1;const _A1=(1-_Q1)/2;this._w1=_w1/_Z1;this._x1=_x1/_Z1;this._y1=_y1/_Z1;this._z1=_z1/_Z1;this._A1=_A1/_Z1;this._12=_22;this._G1=_N1;}}registerProcessor("lpf2-processor",_42);class _52 extends AudioWorkletProcessor{
static get parameterDescriptors(){const _v1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_v1),minValue:10.0,maxValue:_v1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_V){super();this._F();const _W=_V.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;
this._z1=0;this._A1=0;this._B1=new Float32Array(_W);this._C1=new Float32Array(_W);this._D1=new Float32Array(_W);this._E1=new Float32Array(_W);this._F1=-1;this._G1=-1;this._H1=-1;}process(_J,_K,parameters){const input=_J[0];const output=_K[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _I1=(freq.length===1&&q.length===1&&gain.length===1);if(_I1)this._J1(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _L=input[c];const _R=output[c];
for(let _M=0;_M<_L.length;++_M){if(_I1===false){const _Z=(freq[_M]!==undefined)?freq[_M]:freq[0];const _K1=(q[_M]!==undefined)?q[_M]:q[0];const _S=(gain[_M]!==undefined)?gain[_M]:gain[0];this._J1(_Z,_K1,_S);}const _L1=this._y1*_L[_M]+this._z1*this._B1[c]+this._A1*this._C1[c]-this._w1*this._D1[c]-this._x1*this._E1[c];this._C1[c]=this._B1[c];this._B1[c]=_L[_M];this._E1[c]=this._D1[c];this._D1[c]=_L1;const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];_R[_M]=(_N>0)?_L[_M]:_L1;}}return this._G;}_J1(_M1,
_N1,_O1){if(_M1===this._F1&&_N1===this._G1&&_O1===this._H1)return;const _P1=2*Math.PI*_M1/sampleRate;const _Q1=Math.cos(_P1);const _R1=Math.sqrt(_O1);const alpha=Math.sin(_P1)/(2*_N1);const _62=alpha/_R1;const _72=alpha*_R1;const _Z1=1+_62;const _w1=-2*_Q1;const _x1=1-_62;const _y1=1+_72;const _z1=_w1;const _A1=1-_72;this._w1=_w1/_Z1;this._x1=_x1/_Z1;this._y1=_y1/_Z1;this._z1=_z1/_Z1;this._A1=_A1/_Z1;this._F1=_M1;this._G1=_N1;this._H1=_O1;}}registerProcessor("peak-eq-processor",_52);class _82{constructor(_92){
this._a2=0;this._b2=0;this.feedback=0;this._c2=0;this.buffer=new Float32Array(_92);this._d2=0;}process(_h1){const out=this.buffer[this._d2];this._c2=(this._c2*this._a2)+(out*this._b2);this.buffer[this._d2]=_h1+(this._c2*this.feedback);++this._d2;this._d2%=this.buffer.length;return out;}_e2(_f2){this.feedback=Math.min(Math.max(0,_f2),1);}_g2(_h2){this._a2=Math.min(Math.max(0,_h2),1);this._b2=1-this._a2;}}class _i2{constructor(_92){this.feedback=0;this.buffer=new Float32Array(_92);this._d2=0;}process(_h1){
const out=this.buffer[this._d2];this.buffer[this._d2]=_h1+(out*this.feedback);++this._d2;this._d2%=this.buffer.length;return(out-_h1);}_e2(_f2){this.feedback=Math.min(Math.max(0,_f2),1);}}class _j2 extends AudioWorkletProcessor{static _k2=8;static _l2=4;static _m2=0.015;static _n2=0.4;static _o2=0.28;static _p2=0.7;static _q2=[1116,1188,1277,1356,1422,1491,1557,1617];static _r2=[1139,1211,1300,1379,1445,1514,1580,1640];static _s2=[556,441,341,225];static _t2=[579,464,364,248];static get parameterDescriptors(){return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_V){super();this._F();const _W=_V.outputChannelCount[0];this._u2=-1;this._v2=-1;this._w2=new Array(_W);this._x2=new Array(_W);const _y2=[_j2._q2,_j2._r2];const _z2=[_j2._s2,
_j2._t2];for(let c=0;c<_W;++c){this._w2[c]=new Array(_j2._k2);this._x2[c]=new Array(_j2._l2);for(let i=0;i<_j2._k2;++i)this._w2[c][i]=new _82(_y2[c%_y2.length][i]);for(let i=0;i<_j2._l2;++i)this._x2[c][i]=new _i2(_z2[c%_z2.length][i]);}this._A2(0.5);this._g2(0.5);for(let c=0;c<_W;++c)for(let i=0;i<_j2._l2;++i)this._x2[c][i]._e2(0.5);}process(_J,_K,parameters){const input=_J[0];const output=_K[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;
c<input.length;++c){const _L=input[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M){const _M=(size[_M]!==undefined)?size[_M]:size[0];const _B2=(damp[_M]!==undefined)?damp[_M]:damp[0];this._A2(_M);this._g2(_B2);_R[_M]=_L[_M];let out=0;const __=_L[_M]*_j2._m2;for(let i=0;i<_j2._k2;++i)out+=this._w2[c][i].process(__);for(let i=0;i<_j2._l2;++i)out=this._x2[c][i].process(out);const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];if(_N>0.0){continue;}const _11=(mix[_M]!==undefined)?mix[_M]:mix[0];_R[_M]*=(1-_11);
_R[_M]+=(out*_11);}}return this._G;}_A2(_92){if(_92===this._u2)return;const size=(_92*_j2._o2)+_j2._p2;for(let c=0;c<this._w2.length;++c)for(let i=0;i<_j2._k2;++i)this._w2[c][i]._e2(size);this._u2=_92;}_g2(_h2){if(_h2===this._v2)return;const damp=_h2*_j2._n2;for(let c=0;c<this._w2.length;++c)for(let i=0;i<_j2._k2;++i)this._w2[c][i]._g2(damp);this._v2=_h2;}}registerProcessor("reverb1-processor",_j2);class _C2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_V){super();this._F();const _W=_V.outputChannelCount[0];this._D2=new Array(_W).fill(1.0);this._E2=new Array(_W).fill(0.0);this._F2=new Array(_W).fill(_G2._H2._I2);
this._J2=new Array(_W);for(let c=0;c<_W;++c){this._J2[c]=new _K2();this._J2[c]._L2(sampleRate);this._J2[c]._M2(this._D2[c]);this._J2[c]._N2(this._F2[c]);if(c%2===1){this._J2[c]._O2(this._E2[c]);}}}process(_J,_K,parameters){const input=_J[0];const output=_K[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _L=input[c];const _R=output[c];for(let _M=0;_M<_L.length;++_M){
_R[_M]=_L[_M];const _01=(rate[_M]!==undefined)?rate[_M]:rate[0];const _P2=(offset[_M]!==undefined)?offset[_M]:offset[0];const _Q2=(shape[_M]!==undefined)?shape[_M]:shape[0];this._R2(c,_01,_P2,_Q2);const _S2=this._J2[c]._81();const _N=(bypass[_M]!==undefined)?bypass[_M]:bypass[0];if(_N>0.0){continue;}const i=(intensity[_M]!==undefined)?intensity[_M]:intensity[0];const out=_L[_M]*_S2*i;_R[_M]*=(1.0-i);_R[_M]+=out;}}return this._G;}_R2(_a1,_T2,_U2,_V2){if(_T2!==this._D2[_a1]){this._J2[_a1]._M2(_T2);this._D2[_a1]=_T2;
}if(_U2!==this._E2[_a1]){if(_a1%2===1){this._J2[_a1]._O2(_U2);}this._E2[_a1]=_U2;}if(_V2!==this._F2[_a1]){this._J2[_a1]._N2(_V2);this._F2[_a1]=_V2;}}}registerProcessor("tremolo-processor",_C2);function _G2(){}_G2._H2={_I2:0,_W2:1,_X2:2,_Y2:3,_Z2:4,__2:5};_G2._03=function(_13){return 1.0-_13;};_G2._23=function(_13){return _13;};_G2._33=function(_13){return 0.5*(Math.sin((_13*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_G2._43=function(_13){if(_13<0.5){return 0.0;}return 1.0;};_G2._53=function(_13){if(_13<0.5){return 2.0*_13;
}return 2.0-(2.0*_13);};_G2._63=[_G2._03,_G2._23,_G2._33,_G2._43,_G2._53];_73._83=512;_73._93=1.0/_73._83;function _73(_a3){this.data=new Float32Array(_73._83);for(let i=0;i<_73._83;++i){this.data[i]=_a3(i*_73._93);}}_73.prototype._81=function(_13){_13=Math.max(0.0,_13);_13=Math.min(_13,1.0);const _b3=_13*_73._83;const _c3=~~_b3;const _d3=_b3-_c3;let _d1=_c3;let _e1=_d1+1;if(_d1>=_73._83){_d1-=_73._83;}if(_e1>=_73._83){_e1-=_73._83;}const _f1=this.data[_d1];const _g1=this.data[_e1];return _f1+(_g1-_f1)*_d3;
};_K2._e3=[];_K2._f3=false;_K2._g3=0.0;_K2._v1=20.0;function _K2(){this._h3=48000;this.shape=_G2._H2._X2;this.freq=1.0;this._i3=0.0;this._93=0.0;this._j3=0.0;if(_K2._f3==true){return;}for(let i=0;i<_G2._H2.__2;++i){_K2._e3[i]=new _73(_G2._63[i]);}_K2._f3=true;}_K2._k3=function(){return(_K2._f3==true);};_K2.prototype._L2=function(_l3){this._h3=_l3;this._m3();};_K2.prototype._M2=function(_M1){_M1=Math.max(_K2._g3,_M1);_M1=Math.min(_M1,_K2._v1);this.freq=_M1;this._m3();};_K2.prototype._O2=function(_U2){
_U2=Math.max(0.0,_U2);_U2=Math.min(_U2,1.0);const _n3=_U2-this._j3;this._j3=_U2;this._i3+=_n3;while(this._i3>=1.0){this._i3-=1.0;}while(this._i3<0.0){this._i3+=1.0;}};_K2.prototype._N2=function(_V2){_V2=Math.max(0,_V2);_V2=Math.min(_V2,_G2._H2.__2-1);this.shape=_V2;};_K2.prototype._81=function(){const result=_K2._e3[this.shape]._81(this._i3);this._i3+=this._93;while(this._i3>=1.0){this._i3-=1.0;}return result;};_K2.prototype._m3=function(){this._93=this.freq/this._h3;};