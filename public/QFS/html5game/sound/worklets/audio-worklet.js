AudioWorkletProcessor.prototype._H2=function(){this._I2=true;this.port.onmessage=(_J2)=>{if(_J2.data==="kill")this._I2=false;};};class _K2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._H2();}process(_L2,_M2,parameters){const input=_L2[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _N2=input[c];for(let _O2=0;_O2<_N2.length;++_O2){const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];
_M2[_P2][c][_O2]=_N2[_O2];}}return this._I2;}}class _Q2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._H2();}process(_L2,_M2,parameters){const _R2=_L2[0];const _S2=_L2[1];const output=_M2[0];const gain=parameters.gain;for(let c=0;c<_S2.length;++c){const _N2=_S2[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2)_T2[_O2]=_N2[_O2];}for(let c=0;c<_R2.length;++c){const _N2=_R2[c];const _T2=output[c];
for(let _O2=0;_O2<_N2.length;++_O2){const _U2=(gain[_O2]!==undefined)?gain[_O2]:gain[0];_T2[_O2]+=_N2[_O2]*_U2;}}return this._I2;}}registerProcessor("audio-bus-input",_K2);registerProcessor("audio-bus-output",_Q2);class _V2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _W2=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_X2){super();this._H2();const _Y2=_X2.outputChannelCount[0];this._Z2=new Float32Array(_Y2);this.__2=new Uint32Array(_Y2);}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2){_T2[_O2]=_N2[_O2];if(this.__2[c]===0)this._Z2[c]=_N2[_O2];const _03=(factor[_O2]!==undefined)?factor[_O2]:factor[0];++this.__2[c];this.__2[c]%=_03;const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];if(_P2>0.0){continue;}let _13=this._Z2[c];const _U2=(gain[_O2]!==undefined)?gain[_O2]:gain[0];_13*=_U2;_13=Math.max(Math.min(_13,
1.0),-1.0);const _23=(resolution[_O2]!==undefined)?resolution[_O2]:resolution[0];const max=(_13>0.0)?_V2._W2[_23]-1:_V2._W2[_23];_13=Math.round(_13*max)/max;const _33=(mix[_O2]!==undefined)?mix[_O2]:mix[0];_T2[_O2]*=(1.0-_33);_T2[_O2]+=(_13*_33);}}return this._I2;}}registerProcessor("bitcrusher-processor",_V2);class _43 extends AudioWorkletProcessor{static _53=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",
defaultValue:0.2,minValue:0.0,maxValue:_43._53},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_X2){super();this._H2();const _Y2=_X2.outputChannelCount[0];const _63=(_43._53*sampleRate)+1;this.buffer=new Array(_Y2);this._73=new Uint32Array(_Y2);for(let c=0;c<_Y2;++c)this.buffer[c]=new Float32Array(_63);}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;
const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2){_T2[_O2]=_N2[_O2];const _83=(time[_O2]!==undefined)?time[_O2]:time[0];const _93=this._a3(c,_83);const _03=(feedback[_O2]!==undefined)?feedback[_O2]:feedback[0];const _b3=_N2[_O2]+(_93*_03);this.write(c,_b3);const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];if(_P2>0.0){continue;}const _33=(mix[_O2]!==undefined)?mix[_O2]:mix[0];
_T2[_O2]*=(1-_33);_T2[_O2]+=(_93*_33);}}return this._I2;}_a3(_c3,_d3){const _e3=_d3*sampleRate;let _f3=(this._73[_c3]-~~_e3);let _g3=(_f3-1);while(_f3<0)_f3+=this.buffer[_c3].length;while(_g3<0)_g3+=this.buffer[_c3].length;const frac=_e3-~~_e3;const _h3=this.buffer[_c3][_f3];const _i3=this.buffer[_c3][_g3];return _h3+(_i3-_h3)*frac;}write(_c3,_j3){++this._73[_c3];this._73[_c3]%=this.buffer[_c3].length;this.buffer[_c3][this._73[_c3]]=_j3;}}registerProcessor("delay-processor",_43);class _k3 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [];}constructor(){super();this._H2();}process(_l3,_m3,_n3){const input=_l3[0];const _o3=_m3[0];const _p3=_m3[1];for(let c=0;c<input.length;++c){const _N2=input[c];const _q3=_o3[c];const _r3=_p3[c];for(let _O2=0;_O2<_N2.length;++_O2){_q3[_O2]=_N2[_O2];_r3[_O2]=_N2[_O2];}}return this._I2;}}class _s3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._H2();
}process(_l3,_m3,_n3){const _R2=_l3[0];const _S2=_l3[1];const output=_m3[0];const bypass=_n3.bypass;for(let c=0;c<_S2.length;++c){const _t3=_R2[c];const _u3=_S2[c];const _T2=output[c];for(let _O2=0;_O2<_t3.length;++_O2){const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];if(_P2>0){_T2[_O2]=_u3[_O2];}else {_T2[_O2]=_t3[_O2];}}}return this._I2;}}registerProcessor("eq-input",_k3);registerProcessor("eq-output",_s3);class _v3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._H2();}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2){_T2[_O2]=_N2[_O2];const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];if(_P2>0.0){continue;}const _U2=(gain[_O2]!==undefined)?gain[_O2]:gain[0];
_T2[_O2]*=_U2;}}return this._I2;}}registerProcessor("gain-processor",_v3);class _w3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _x3=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_x3),minValue:10.0,maxValue:_x3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,
minValue:1e-6}];}constructor(_X2){super();this._H2();const _Y2=_X2.outputChannelCount[0];this._y3=0;this._z3=0;this._A3=0;this._B3=0;this._C3=0;this._D3=new Float32Array(_Y2);this._E3=new Float32Array(_Y2);this._F3=new Float32Array(_Y2);this._G3=new Float32Array(_Y2);this._H3=-1;this._I3=-1;this._J3=-1;}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _K3=(freq.length===1&&q.length===1&&gain.length===1);
if(_K3)this._L3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2){if(_K3===false){const _03=(freq[_O2]!==undefined)?freq[_O2]:freq[0];const _M3=(q[_O2]!==undefined)?q[_O2]:q[0];const _U2=(gain[_O2]!==undefined)?gain[_O2]:gain[0];this._L3(_03,_M3,_U2);}const _N3=this._A3*_N2[_O2]+this._B3*this._D3[c]+this._C3*this._E3[c]-this._y3*this._F3[c]-this._z3*this._G3[c];this._E3[c]=this._D3[c];this._D3[c]=_N2[_O2];this._G3[c]=this._F3[c];
this._F3[c]=_N3;const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];_T2[_O2]=(_P2>0)?_N2[_O2]:_N3;}}return this._I2;}_L3(_O3,_P3,_Q3){if(_O3===this._H3&&_P3===this._I3&&_Q3===this._J3)return;const _R3=2*Math.PI*_O3/sampleRate;const _S3=Math.cos(_R3);const _T3=Math.sqrt(_Q3);const _U3=_T3+1;const _V3=_T3-1;const _W3=_U3*_S3;const _X3=_V3*_S3;const _Y3=_U3-_X3;const _Z3=_U3+_X3;const alpha=Math.sin(_R3)/(2*_P3);const __3=(2*Math.sqrt(_T3)*alpha);const _04=_Y3+__3;const _y3=2*(_V3-_W3);const _z3=_Y3-__3;const _A3=_T3*(_Z3+__3);
const _B3=-2*_T3*(_V3+_W3);const _C3=_T3*(_Z3-__3);this._y3=_y3/_04;this._z3=_z3/_04;this._A3=_A3/_04;this._B3=_B3/_04;this._C3=_C3/_04;this._H3=_O3;this._I3=_P3;this._J3=_Q3;}}registerProcessor("hi-shelf-processor",_w3);class _14 extends AudioWorkletProcessor{static get parameterDescriptors(){const _24=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_24),minValue:10.0,
maxValue:_24},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_X2){super();this._H2();const _Y2=_X2.outputChannelCount[0];this._y3=0;this._z3=0;this._A3=0;this._B3=0;this._C3=0;this._D3=new Float32Array(_Y2);this._E3=new Float32Array(_Y2);this._F3=new Float32Array(_Y2);this._G3=new Float32Array(_Y2);this._34=-1;this._I3=-1;}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;
const _K3=(cutoff.length===1&&q.length===1);if(_K3)this._L3(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2){if(_K3===false){const c=(cutoff[_O2]!==undefined)?cutoff[_O2]:cutoff[0];const _M3=(q[_O2]!==undefined)?q[_O2]:q[0];this._L3(c,_M3);}const _N3=this._A3*_N2[_O2]+this._B3*this._D3[c]+this._C3*this._E3[c]-this._y3*this._F3[c]-this._z3*this._G3[c];this._E3[c]=this._D3[c];this._D3[c]=_N2[_O2];this._G3[c]=this._F3[c];this._F3[c]=_N3;
const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];_T2[_O2]=(_P2>0)?_N2[_O2]:_N3;}}return this._I2;}_L3(_44,_P3){if(_44===this._34&&_P3===this._I3)return;const _R3=2*Math.PI*_44/sampleRate;const alpha=Math.sin(_R3)/(2*_P3);const _S3=Math.cos(_R3);const _04=1+alpha;const _y3=-2*_S3;const _z3=1-alpha;const _A3=(1+_S3)/2;const _B3=-1-_S3;const _C3=(1+_S3)/2;this._y3=_y3/_04;this._z3=_z3/_04;this._A3=_A3/_04;this._B3=_B3/_04;this._C3=_C3/_04;this._34=_44;this._I3=_P3;}}registerProcessor("hpf2-processor",
_14);class _54 extends AudioWorkletProcessor{static get parameterDescriptors(){const _x3=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_x3),minValue:10.0,maxValue:_x3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_X2){super();this._H2();const _Y2=_X2.outputChannelCount[0];
this._y3=0;this._z3=0;this._A3=0;this._B3=0;this._C3=0;this._D3=new Float32Array(_Y2);this._E3=new Float32Array(_Y2);this._F3=new Float32Array(_Y2);this._G3=new Float32Array(_Y2);this._H3=-1;this._I3=-1;this._J3=-1;}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _K3=(freq.length===1&&q.length===1&&gain.length===1);if(_K3)this._L3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2){if(_K3===false){const _03=(freq[_O2]!==undefined)?freq[_O2]:freq[0];const _M3=(q[_O2]!==undefined)?q[_O2]:q[0];const _U2=(gain[_O2]!==undefined)?gain[_O2]:gain[0];this._L3(_03,_M3,_U2);}const _N3=this._A3*_N2[_O2]+this._B3*this._D3[c]+this._C3*this._E3[c]-this._y3*this._F3[c]-this._z3*this._G3[c];this._E3[c]=this._D3[c];this._D3[c]=_N2[_O2];this._G3[c]=this._F3[c];this._F3[c]=_N3;const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];
_T2[_O2]=(_P2>0)?_N2[_O2]:_N3;}}return this._I2;}_L3(_O3,_P3,_Q3){if(_O3===this._H3&&_P3===this._I3&&_Q3===this._J3)return;const _R3=2*Math.PI*_O3/sampleRate;const _S3=Math.cos(_R3);const _T3=Math.sqrt(_Q3);const _U3=_T3+1;const _V3=_T3-1;const _W3=_U3*_S3;const _X3=_V3*_S3;const _Y3=_U3-_X3;const _Z3=_U3+_X3;const alpha=Math.sin(_R3)/(2*_P3);const __3=(2*Math.sqrt(_T3)*alpha);const _04=_Z3+__3;const _y3=-2*(_V3+_W3);const _z3=_Z3-__3;const _A3=_T3*(_Y3+__3);const _B3=2*_T3*(_V3-_W3);const _C3=_T3*(_Y3-__3);this._y3=_y3/_04;
this._z3=_z3/_04;this._A3=_A3/_04;this._B3=_B3/_04;this._C3=_C3/_04;this._H3=_O3;this._I3=_P3;this._J3=_Q3;}}registerProcessor("lo-shelf-processor",_54);class _64 extends AudioWorkletProcessor{static get parameterDescriptors(){const _24=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_24),minValue:10.0,maxValue:_24},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,
maxValue:100.0}];}constructor(_X2){super();this._H2();const _Y2=_X2.outputChannelCount[0];this._y3=0;this._z3=0;this._A3=0;this._B3=0;this._C3=0;this._D3=new Float32Array(_Y2);this._E3=new Float32Array(_Y2);this._F3=new Float32Array(_Y2);this._G3=new Float32Array(_Y2);this._34=-1;this._I3=-1;}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _K3=(cutoff.length===1&&q.length===1);if(_K3)this._L3(cutoff[0],
q[0]);for(let c=0;c<input.length;++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2){if(_K3===false){const c=(cutoff[_O2]!==undefined)?cutoff[_O2]:cutoff[0];const _M3=(q[_O2]!==undefined)?q[_O2]:q[0];this._L3(c,_M3);}const _N3=this._A3*_N2[_O2]+this._B3*this._D3[c]+this._C3*this._E3[c]-this._y3*this._F3[c]-this._z3*this._G3[c];this._E3[c]=this._D3[c];this._D3[c]=_N2[_O2];this._G3[c]=this._F3[c];this._F3[c]=_N3;const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];_T2[_O2]=(_P2>0)?_N2[_O2]:_N3;
}}return this._I2;}_L3(_44,_P3){if(_44===this._34&&_P3===this._I3)return;const _R3=2*Math.PI*_44/sampleRate;const alpha=Math.sin(_R3)/(2*_P3);const _S3=Math.cos(_R3);const _04=1+alpha;const _y3=-2*_S3;const _z3=1-alpha;const _A3=(1-_S3)/2;const _B3=1-_S3;const _C3=(1-_S3)/2;this._y3=_y3/_04;this._z3=_z3/_04;this._A3=_A3/_04;this._B3=_B3/_04;this._C3=_C3/_04;this._34=_44;this._I3=_P3;}}registerProcessor("lpf2-processor",_64);class _74 extends AudioWorkletProcessor{static get parameterDescriptors(){const _x3=Math.min(sampleRate/2.0,
20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_x3),minValue:10.0,maxValue:_x3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_X2){super();this._H2();const _Y2=_X2.outputChannelCount[0];this._y3=0;this._z3=0;this._A3=0;this._B3=0;this._C3=0;this._D3=new Float32Array(_Y2);
this._E3=new Float32Array(_Y2);this._F3=new Float32Array(_Y2);this._G3=new Float32Array(_Y2);this._H3=-1;this._I3=-1;this._J3=-1;}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _K3=(freq.length===1&&q.length===1&&gain.length===1);if(_K3)this._L3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2){if(_K3===false){
const _03=(freq[_O2]!==undefined)?freq[_O2]:freq[0];const _M3=(q[_O2]!==undefined)?q[_O2]:q[0];const _U2=(gain[_O2]!==undefined)?gain[_O2]:gain[0];this._L3(_03,_M3,_U2);}const _N3=this._A3*_N2[_O2]+this._B3*this._D3[c]+this._C3*this._E3[c]-this._y3*this._F3[c]-this._z3*this._G3[c];this._E3[c]=this._D3[c];this._D3[c]=_N2[_O2];this._G3[c]=this._F3[c];this._F3[c]=_N3;const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];_T2[_O2]=(_P2>0)?_N2[_O2]:_N3;}}return this._I2;}_L3(_O3,_P3,_Q3){if(_O3===this._H3&&_P3===this._I3&&_Q3===this._J3)return;
const _R3=2*Math.PI*_O3/sampleRate;const _S3=Math.cos(_R3);const _T3=Math.sqrt(_Q3);const alpha=Math.sin(_R3)/(2*_P3);const _84=alpha/_T3;const _94=alpha*_T3;const _04=1+_84;const _y3=-2*_S3;const _z3=1-_84;const _A3=1+_94;const _B3=_y3;const _C3=1-_94;this._y3=_y3/_04;this._z3=_z3/_04;this._A3=_A3/_04;this._B3=_B3/_04;this._C3=_C3/_04;this._H3=_O3;this._I3=_P3;this._J3=_Q3;}}registerProcessor("peak-eq-processor",_74);class _a4{constructor(_b4){this._c4=0;this._d4=0;this.feedback=0;this._e4=0;this.buffer=new Float32Array(_b4);
this._f4=0;}process(_j3){const out=this.buffer[this._f4];this._e4=(this._e4*this._c4)+(out*this._d4);this.buffer[this._f4]=_j3+(this._e4*this.feedback);++this._f4;this._f4%=this.buffer.length;return out;}_g4(_h4){this.feedback=Math.min(Math.max(0,_h4),1);}_i4(_j4){this._c4=Math.min(Math.max(0,_j4),1);this._d4=1-this._c4;}}class _k4{constructor(_b4){this.feedback=0;this.buffer=new Float32Array(_b4);this._f4=0;}process(_j3){const out=this.buffer[this._f4];this.buffer[this._f4]=_j3+(out*this.feedback);++this._f4;
this._f4%=this.buffer.length;return(out-_j3);}_g4(_h4){this.feedback=Math.min(Math.max(0,_h4),1);}}class _l4 extends AudioWorkletProcessor{static _m4=8;static _n4=4;static _o4=0.015;static _p4=0.4;static _q4=0.28;static _r4=0.7;static _s4=[1116,1188,1277,1356,1422,1491,1557,1617];static _t4=[1139,1211,1300,1379,1445,1514,1580,1640];static _u4=[556,441,341,225];static _v4=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",
automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_X2){super();this._H2();const _Y2=_X2.outputChannelCount[0];this._w4=-1;this._x4=-1;this._y4=new Array(_Y2);this._z4=new Array(_Y2);const _A4=[_l4._s4,_l4._t4];const _B4=[_l4._u4,_l4._v4];for(let c=0;c<_Y2;++c){this._y4[c]=new Array(_l4._m4);this._z4[c]=new Array(_l4._n4);
for(let i=0;i<_l4._m4;++i)this._y4[c][i]=new _a4(_A4[c%_A4.length][i]);for(let i=0;i<_l4._n4;++i)this._z4[c][i]=new _k4(_B4[c%_B4.length][i]);}this._C4(0.5);this._i4(0.5);for(let c=0;c<_Y2;++c)for(let i=0;i<_l4._n4;++i)this._z4[c][i]._g4(0.5);}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;
++_O2){const _O2=(size[_O2]!==undefined)?size[_O2]:size[0];const _D4=(damp[_O2]!==undefined)?damp[_O2]:damp[0];this._C4(_O2);this._i4(_D4);_T2[_O2]=_N2[_O2];let out=0;const _13=_N2[_O2]*_l4._o4;for(let i=0;i<_l4._m4;++i)out+=this._y4[c][i].process(_13);for(let i=0;i<_l4._n4;++i)out=this._z4[c][i].process(out);const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];if(_P2>0.0){continue;}const _33=(mix[_O2]!==undefined)?mix[_O2]:mix[0];_T2[_O2]*=(1-_33);_T2[_O2]+=(out*_33);}}return this._I2;}_C4(_b4){if(_b4===this._w4)return;
const size=(_b4*_l4._q4)+_l4._r4;for(let c=0;c<this._y4.length;++c)for(let i=0;i<_l4._m4;++i)this._y4[c][i]._g4(size);this._w4=_b4;}_i4(_j4){if(_j4===this._x4)return;const damp=_j4*_l4._p4;for(let c=0;c<this._y4.length;++c)for(let i=0;i<_l4._m4;++i)this._y4[c][i]._i4(damp);this._x4=_j4;}}registerProcessor("reverb1-processor",_l4);class _E4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",
defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_X2){super();this._H2();const _Y2=_X2.outputChannelCount[0];this._F4=new Array(_Y2).fill(1.0);this._G4=new Array(_Y2).fill(0.0);this._H4=new Array(_Y2).fill(_I4._J4._K4);this._L4=new Array(_Y2);for(let c=0;
c<_Y2;++c){this._L4[c]=new _M4();this._L4[c]._N4(sampleRate);this._L4[c]._O4(this._F4[c]);this._L4[c]._P4(this._H4[c]);if(c%2===1){this._L4[c]._Q4(this._G4[c]);}}}process(_L2,_M2,parameters){const input=_L2[0];const output=_M2[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _N2=input[c];const _T2=output[c];for(let _O2=0;_O2<_N2.length;++_O2){_T2[_O2]=_N2[_O2];const _23=(rate[_O2]!==undefined)?rate[_O2]:rate[0];
const _R4=(offset[_O2]!==undefined)?offset[_O2]:offset[0];const _S4=(shape[_O2]!==undefined)?shape[_O2]:shape[0];this._T4(c,_23,_R4,_S4);const _U4=this._L4[c]._a3();const _P2=(bypass[_O2]!==undefined)?bypass[_O2]:bypass[0];if(_P2>0.0){continue;}const i=(intensity[_O2]!==undefined)?intensity[_O2]:intensity[0];const out=_N2[_O2]*_U4*i;_T2[_O2]*=(1.0-i);_T2[_O2]+=out;}}return this._I2;}_T4(_c3,_V4,_W4,_X4){if(_V4!==this._F4[_c3]){this._L4[_c3]._O4(_V4);this._F4[_c3]=_V4;}if(_W4!==this._G4[_c3]){if(_c3%2===1){
this._L4[_c3]._Q4(_W4);}this._G4[_c3]=_W4;}if(_X4!==this._H4[_c3]){this._L4[_c3]._P4(_X4);this._H4[_c3]=_X4;}}}registerProcessor("tremolo-processor",_E4);function _I4(){}_I4._J4={_K4:0,_Y4:1,_Z4:2,__4:3,_05:4,_15:5};_I4._25=function(_35){return 1.0-_35;};_I4._45=function(_35){return _35;};_I4._55=function(_35){return 0.5*(Math.sin((_35*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_I4._65=function(_35){if(_35<0.5){return 0.0;}return 1.0;};_I4._75=function(_35){if(_35<0.5){return 2.0*_35;}return 2.0-(2.0*_35);};_I4._85=[_I4._25,
_I4._45,_I4._55,_I4._65,_I4._75];_95._a5=512;_95._b5=1.0/_95._a5;function _95(_c5){this.data=new Float32Array(_95._a5);for(let i=0;i<_95._a5;++i){this.data[i]=_c5(i*_95._b5);}}_95.prototype._a3=function(_35){_35=Math.max(0.0,_35);_35=Math.min(_35,1.0);const _d5=_35*_95._a5;const _e5=~~_d5;const _f5=_d5-_e5;let _f3=_e5;let _g3=_f3+1;if(_f3>=_95._a5){_f3-=_95._a5;}if(_g3>=_95._a5){_g3-=_95._a5;}const _h3=this.data[_f3];const _i3=this.data[_g3];return _h3+(_i3-_h3)*_f5;};_M4._g5=[];_M4._h5=false;_M4._i5=0.0;_M4._x3=20.0;
function _M4(){this._j5=48000;this.shape=_I4._J4._Z4;this.freq=1.0;this._k5=0.0;this._b5=0.0;this._l5=0.0;if(_M4._h5==true){return;}for(let i=0;i<_I4._J4._15;++i){_M4._g5[i]=new _95(_I4._85[i]);}_M4._h5=true;}_M4._m5=function(){return(_M4._h5==true);};_M4.prototype._N4=function(_n5){this._j5=_n5;this._o5();};_M4.prototype._O4=function(_O3){_O3=Math.max(_M4._i5,_O3);_O3=Math.min(_O3,_M4._x3);this.freq=_O3;this._o5();};_M4.prototype._Q4=function(_W4){_W4=Math.max(0.0,_W4);_W4=Math.min(_W4,1.0);const _p5=_W4-this._l5;
this._l5=_W4;this._k5+=_p5;while(this._k5>=1.0){this._k5-=1.0;}while(this._k5<0.0){this._k5+=1.0;}};_M4.prototype._P4=function(_X4){_X4=Math.max(0,_X4);_X4=Math.min(_X4,_I4._J4._15-1);this.shape=_X4;};_M4.prototype._a3=function(){const result=_M4._g5[this.shape]._a3(this._k5);this._k5+=this._b5;while(this._k5>=1.0){this._k5-=1.0;}return result;};_M4.prototype._o5=function(){this._b5=this.freq/this._j5;};